/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _ABSTRACTSTUBSERVER_H_
#define _ABSTRACTSTUBSERVER_H_

#include <jsonrpc/rpc.h>

class AbstractstubServer : public jsonrpc::AbstractServer<AbstractstubServer>
{
    public:
        AbstractstubServer(jsonrpc::AbstractServerConnector* conn) :
            jsonrpc::AbstractServer<AbstractstubServer>(conn) 
        {
            this->bindAndAddMethod(new jsonrpc::Procedure("addFlowspace", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "listDatapaths",jsonrpc::JSON_ARRAY,"matches",jsonrpc::JSON_OBJECT,"name",jsonrpc::JSON_STRING,"priority",jsonrpc::JSON_INTEGER,"slice",jsonrpc::JSON_STRING, NULL), &AbstractstubServer::addFlowspaceI);
            this->bindAndAddMethod(new jsonrpc::Procedure("addSlice", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "datapaths",jsonrpc::JSON_OBJECT,"ip",jsonrpc::JSON_STRING,"name",jsonrpc::JSON_STRING,"ofversion",jsonrpc::JSON_STRING,"port",jsonrpc::JSON_INTEGER, NULL), &AbstractstubServer::addSliceI);
            this->bindAndAddMethod(new jsonrpc::Procedure("deleteSlice", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "name",jsonrpc::JSON_STRING, NULL), &AbstractstubServer::deleteSliceI);
            this->bindAndAddMethod(new jsonrpc::Procedure("listDatapaths", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY,  NULL), &AbstractstubServer::listDatapathsI);
            this->bindAndAddMethod(new jsonrpc::Procedure("listFlowspaceInfo", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "name",jsonrpc::JSON_STRING, NULL), &AbstractstubServer::listFlowspaceInfoI);
            this->bindAndAddMethod(new jsonrpc::Procedure("listFlowspaces", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY,  NULL), &AbstractstubServer::listFlowspacesI);
            this->bindAndAddMethod(new jsonrpc::Procedure("listSlice", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY,  NULL), &AbstractstubServer::listSliceI);
            this->bindAndAddMethod(new jsonrpc::Procedure("listSliceInfo", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "name",jsonrpc::JSON_STRING, NULL), &AbstractstubServer::listSliceInfoI);
            this->bindAndAddMethod(new jsonrpc::Procedure("removeFlowspace", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "name",jsonrpc::JSON_STRING, NULL), &AbstractstubServer::removeFlowspaceI);

        }
        
        inline virtual void addFlowspaceI(const Json::Value& request, Json::Value& response) 
        {
            response = this->addFlowspace(request["listDatapaths"], request["matches"], request["name"].asString(), request["priority"].asInt(), request["slice"].asString());
        }

        inline virtual void addSliceI(const Json::Value& request, Json::Value& response) 
        {
            response = this->addSlice(request["datapaths"], request["ip"].asString(), request["name"].asString(), request["ofversion"].asString(), request["port"].asInt());
        }

        inline virtual void deleteSliceI(const Json::Value& request, Json::Value& response) 
        {
            response = this->deleteSlice(request["name"].asString());
        }

        inline virtual void listDatapathsI(const Json::Value& request, Json::Value& response) 
        {
            response = this->listDatapaths();
        }

        inline virtual void listFlowspaceInfoI(const Json::Value& request, Json::Value& response) 
        {
            response = this->listFlowspaceInfo(request["name"].asString());
        }

        inline virtual void listFlowspacesI(const Json::Value& request, Json::Value& response) 
        {
            response = this->listFlowspaces();
        }

        inline virtual void listSliceI(const Json::Value& request, Json::Value& response) 
        {
            response = this->listSlice();
        }

        inline virtual void listSliceInfoI(const Json::Value& request, Json::Value& response) 
        {
            response = this->listSliceInfo(request["name"].asString());
        }

        inline virtual void removeFlowspaceI(const Json::Value& request, Json::Value& response) 
        {
            response = this->removeFlowspace(request["name"].asString());
        }


        virtual int addFlowspace(const Json::Value& listDatapaths, const Json::Value& matches, const std::string& name, const int& priority, const std::string& slice) = 0;
        virtual int addSlice(const Json::Value& datapaths, const std::string& ip, const std::string& name, const std::string& ofversion, const int& port) = 0;
        virtual int deleteSlice(const std::string& name) = 0;
        virtual Json::Value listDatapaths() = 0;
        virtual Json::Value listFlowspaceInfo(const std::string& name) = 0;
        virtual Json::Value listFlowspaces() = 0;
        virtual Json::Value listSlice() = 0;
        virtual Json::Value listSliceInfo(const std::string& name) = 0;
        virtual int removeFlowspace(const std::string& name) = 0;

};
#endif //_ABSTRACTSTUBSERVER_H_
