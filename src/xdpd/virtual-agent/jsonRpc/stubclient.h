/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _STUBCLIENT_H_
#define _STUBCLIENT_H_

#include <jsonrpc/rpc.h>

class stubClient
{
    public:
        stubClient(jsonrpc::AbstractClientConnector* conn)
        {
            this->client = new jsonrpc::Client(conn);
        }
        ~stubClient()
        {
            delete this->client;
        }

        int addFlowspace(const Json::Value& listDatapaths, const Json::Value& matches, const std::string& name, const int& priority, const std::string& slice) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["listDatapaths"] = listDatapaths; 
p["matches"] = matches; 
p["name"] = name; 
p["priority"] = priority; 
p["slice"] = slice; 

            Json::Value result = this->client->CallMethod("addFlowspace",p);
    if (result.isInt())
        return result.asInt();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        int addSlice(const Json::Value& datapaths, const std::string& ip, const std::string& name, const std::string& ofversion, const int& port) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["datapaths"] = datapaths; 
p["ip"] = ip; 
p["name"] = name; 
p["ofversion"] = ofversion; 
p["port"] = port; 

            Json::Value result = this->client->CallMethod("addSlice",p);
    if (result.isInt())
        return result.asInt();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        int deleteSlice(const std::string& name) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["name"] = name; 

            Json::Value result = this->client->CallMethod("deleteSlice",p);
    if (result.isInt())
        return result.asInt();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value listDatapaths() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("listDatapaths",p);
    if (result.isArray())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value listFlowspaceInfo(const std::string& name) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["name"] = name; 

            Json::Value result = this->client->CallMethod("listFlowspaceInfo",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value listFlowspaces() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("listFlowspaces",p);
    if (result.isArray())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value listSlice() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->client->CallMethod("listSlice",p);
    if (result.isArray())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        Json::Value listSliceInfo(const std::string& name) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["name"] = name; 

            Json::Value result = this->client->CallMethod("listSliceInfo",p);
    if (result.isObject())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        int removeFlowspace(const std::string& name) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["name"] = name; 

            Json::Value result = this->client->CallMethod("removeFlowspace",p);
    if (result.isInt())
        return result.asInt();
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

    private:
        jsonrpc::Client* client;
};
#endif //_STUBCLIENT_H_
